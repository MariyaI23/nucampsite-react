[{"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\index.js":"1","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\App.js":"2","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\reportWebVitals.js":"3","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\DirectoryComponent.js":"4","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\campsites.js":"5","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\CampsiteInfoComponent.js":"6","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\MainComponent.js":"7","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HeaderComponent.js":"8","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\FooterComponent.js":"9","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HomeComponent.js":"10","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\ContactComponent.js":"11","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\partners.js":"12","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\comments.js":"13","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\promotions.js":"14","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\AboutComponent.js":"15","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\configureStore.js":"16","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\reducer.js":"17"},{"size":697,"mtime":1612287301861,"results":"18","hashOfConfig":"19"},{"size":1001,"mtime":1613066701370,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1611527134575,"results":"21","hashOfConfig":"19"},{"size":7242,"mtime":1612465158339,"results":"22","hashOfConfig":"19"},{"size":1242,"mtime":1612316024137,"results":"23","hashOfConfig":"19"},{"size":3962,"mtime":1612565891004,"results":"24","hashOfConfig":"19"},{"size":9287,"mtime":1613068014729,"results":"25","hashOfConfig":"19"},{"size":9054,"mtime":1612926253287,"results":"26","hashOfConfig":"19"},{"size":2140,"mtime":1612311391628,"results":"27","hashOfConfig":"19"},{"size":1227,"mtime":1612320820094,"results":"28","hashOfConfig":"19"},{"size":28118,"mtime":1613086882903,"results":"29","hashOfConfig":"19"},{"size":1054,"mtime":1612315855544,"results":"30","hashOfConfig":"19"},{"size":4243,"mtime":1612315832190,"results":"31","hashOfConfig":"19"},{"size":303,"mtime":1612315868755,"results":"32","hashOfConfig":"19"},{"size":4049,"mtime":1612636814109,"results":"33","hashOfConfig":"19"},{"size":592,"mtime":1613066445776,"results":"34","hashOfConfig":"19"},{"size":1070,"mtime":1613065716476,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1dl1t9c",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\index.js",[],["73","74"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\App.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\reportWebVitals.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\DirectoryComponent.js",["75","76","77","78"],"import React from \"react\";\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/*Since the DirectoryComponent is a presentational component we can use functional components here.In the below featured component's parameter list instead of passing the whole props object we are descructuring it and pass the campsite and the onClick properties. After installing the React-router, we removed the onClick as it is no longer handled here.  */\r\n/*We are creating a Link here that is set to follow the path to the directory and we are adding ${campsite.id} as a template literal because we want to show the card with the particular campsite id that the user clicks on. We are just setting up the link here. Separately the router needs to be set up with the router parameters in the Main component (nested in the Switch component where all the other Routes are) so the link would actually work.*/\r\nfunction RenderDirectoryItem({campsite}) {\r\n     return (\r\n        <Card>   \r\n            <Link to={`/directory/${campsite.id}`}>  \r\n                <CardImg width =\"100%\"src = {campsite.image} alt = {campsite.name} />       \r\n                <CardImgOverlay>\r\n                     <CardTitle>{campsite.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n     );\r\n\r\n}\r\n\r\nfunction Directory(props) {\r\n    const directory = props.campsites.map(campsite => {\r\n        return (\r\n            <div key={campsite.id} className=\"col-md-5 m-1\">\r\n                <RenderDirectoryItem campsite={campsite} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"row\">\r\n                <div className = \"col\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>Directory</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <h2>Directory</h2>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                {directory}                           \r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Directory;\r\n\r\n/*As we are transitioning the Directory component to be made with functional components, all of the code bellow will be commented out. To be deleted later. */\r\n/*  class Directory extends Component {  */\r\n    /*constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           selectedCampsite: null            \r\n        };\r\n    }*/\r\n     /*Above we are establishing a property selectedCamspite that will keep track of the last card the user clicked on. The intial value is set to null..*/\r\n     /*Bellow we are setting up a method that will fire up when the user selects a campsite. We are passing the campsites object. Inside this method we will update the state property with setState() method. Inside it we'll update the selectedCampsite property that we established above from null to now the campsite object which was passed into the onCamspiteSelect() method */\r\n    /*onCampsiteSelect(campsite) {\r\n        this.setState({selectedCampsite: campsite});\r\n    }*/\r\n    /*The onCampsiteSelect() method will be triggered in the Card component bellow with an onClick event since we are trying to track wich Card the user clicks on. */\r\n    /*Bellow we will establish a new method after the user has selected the Card he wants to view addl info on. This method will render(display) the new card with more info. */\r\n    /*Here with the if statement we are checking to see if campsite is an object, if yes it will evaluate as truthy, however if campsite is null or undefined it will be falsy. If truthy it will display the chosen card to the user WITH the addl information(the description property) */\r\n    /*The renderSelectedCampsite() method will be called in the final return statement at the end of this whole component. */\r\n    /* The renderSelectedCamsite() method was commented out as it was moved to the CampsiteInfoComponent's renderCampsite() method*/\r\n\r\n    /*renderSelectedCampsite(campsite) {\r\n        if(campsite) {                    \r\n            return (\r\n                <Card>\r\n                    <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{campsite.name}</CardTitle>\r\n                        <CardText>{campsite.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n        /*Setting up a return bellow the if block in case we didn't make it into the block if evaluated as falsy. It will return a simple empty <div> */\r\n        /*return <div />;*/\r\n    /*}*/\r\n    /*ALL OF THE ABOVE CODE WAS COMMENTED OUT AS IT WAS MOVED TO THE MAINCOMPONENT. WE ARE TURNING THE DIRECTORY COMPONENT INTO PRESENTATIONAL COMPONENT. THE MAINCOMPONENT WILL BE THE CONTAINER COMPONENT THAT WILL HOLD THE STATE */\r\n\r\n     /*  render() {\r\n        const directory = this.props.campsites.map(campsite => {\r\n            return (\r\n                <div key = {campsite.id} className = \"col-md-5 m-1\">     */      {/*Here we are using key so we can identify each item in the array of objects by it's unic id. The app will work fine without it but it gives warning in the console and we add it to follow best practices*/}\r\n                    /*  <Card onClick={() => this.props.onClick(campsite.id)}>  */   {/*Here we are passing the onClick method as props from MainComponent.js */}\r\n                     /*   <CardImg src = {campsite.image} alt = {campsite.name} />     */   {/*We are using curly braces here since we are inside JSX. We are using the map method on every item(campsite) in the campsites array of objects and we want the arrow function to return the stated properties of each one of the items. Map returns a new array. It will be rendered bellow where we added the directory variable inside the div with className=\"row\".*/}\r\n                     /*   <CardImgOverlay>\r\n                            <CardTitle>{campsite.name}</CardTitle>\r\n                        </CardImgOverlay>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        });  */\r\n/*The bellow return is the return from the whole component. When we are ready to break out of this component and send some data back to the parent component-that is going to happend exactly in this final return statment. All the other returns above were inside the methods which are contained inside the DirectoryComponent. These methods are just being used to pass date inside the component. */\r\n       /*  return (\r\n            <div className = \"container\">\r\n                <div className = \"row\">\r\n                    {directory}   */                    {/*Adding a JS variable that we set up after render(). It must be inside curly braces. This directory variable and the Directory class are two separate things.*/}\r\n               /*  </div>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Directory; */","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\campsites.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\CampsiteInfoComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\MainComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HeaderComponent.js",["79"],"import React, {Component} from \"react\";\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n    /*We need to add a constructor and a state in order to make the Navbar responsive. */\r\n     /*the isModalOpen will be a boolean property initialy set to false. This property will keep track if the modal is open or not. */\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleNav = this.toggleNav.bind(this);       {/*Here we are binding the eventhandler(the toggleNav method) to the component, so when the eventhandler is called it will refer correctly to \"this\" which is the component. */}\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n\r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n    }\r\n\r\n    /*Bellow we are setting up a method to handle when the NavBarToggler is clicked. When this method is triggered it will change the state using setState to the oposite of the current state. We are using the logical not operator in this case \"!\". */\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    /*Now we are setting up a toggleModal method just like the togleNav method above. We will also bind this method in the constructor above. */\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    /*Now we will set up the handleLogin method(event handler) used in the <Form> component. Since we are not using a backend to handle the data submission, we will just set up an alert to alert us of the form's values.We will use this.toggleModal to close the modal, and event.preventDefault to prevent the whole page from being re-rendered. Next we need to also bind this handleLogin event handler in the constructor*/\r\n    handleLogin(event) {\r\n        alert(`Username: ${this.username.value} Password: ${this.password.value} Remember: ${this.remember.checked}`);\r\n        this.toggleModal();\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>     {/*Instead of wrapping the whole return statement in a div which will serve no other purpose and will add unnecessary node to the DOM, we can use React.Fragment. It will satisfy the requirement to return only a single element and it will not add another node to the DOM. The shorthand version will be jus to wrap the return elements in <> </>. But this is not fully supported yet. */}\r\n                <Jumbotron fluid>\r\n                    <div className = \"container\">\r\n                        <div className = \"row\">\r\n                            <div className = \"col\">\r\n                                <h1>NuCamp</h1>\r\n                                <h2>a better way to camp</h2>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Navbar dark sticky = \"top\" expand = \"md\">   {/* The sticky=\"top\" is taken from the reactstrap documentation. The expand attaribute is from bootstrap and will make the navbar expand for sizez meduim an up, but it will collapse and show the toggler for sizes sm and extra-sm.*/}\r\n                  <div className = \"container\">\r\n                      <NavbarBrand className = \"mr-auto\" href = \"/\"><img src = \"assets/images/logo.png\" height = \"30\" width = \"30\" alt = \"NuCamp Logo\" /></NavbarBrand>\r\n                      <NavbarToggler onClick = {this.toggleNav} />    {/*The onClick event here will make it so, when the Navbar Toggler is clicked it will trigger the toggleNav method/event. */}\r\n                      <Collapse isOpen = {this.state.isNavOpen} navbar>   {/*Here is we are setting up the Collapse React-Router attribute and are using an attribute: isOpen setting to either false or true depending on the current state. We are adding a navbar attaribute as well per reactstrap documentation */}\r\n                          <Nav navbar>                                    {/*We are setting up the links towards each part of our page. Each NavLink is a separate NavItem in the Nav React-Router component. */}\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to =\"/home\">\r\n                                      <i className = \"fa fa-home fa-lg\" /> Home\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/directory\">\r\n                                      <i className = \"fa fa-list fa-lg\" /> Directory\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/aboutus\">\r\n                                      <i className = \"fa fa-info fa-lg\" /> About\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/contactus\">\r\n                                      <i className = \"fa fa-address-card fa-lg\" /> Contact Us\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                          </Nav>\r\n                          <span className=\"navbar-text ml-auto\">         {/*We are using a JSX span element to wrap a button component for the modal. We are placing it here so it is still inside the Collapse component so it will show when the navbar is collapsed. We are styling it so it will be the same style as the rest of the navbar items.The ml-auto will allign it horizontally to the right. */}\r\n                              <Button outline onClick={this.toggleModal}>\r\n                                  <i className=\" fa fa-sign-in fa-lg\" /> Login\r\n                              </Button>\r\n                          </span>\r\n                      </Collapse>\r\n                  </div>\r\n                </Navbar>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>                                               {/*The reactstrap <Modal> component comes with 2 built in attributes: isOpen and toggle. The shown value of the isOpen attribute means that when this state is false which initily we set it to be -the modal will be closed/hidden. If the state changes to true, the modal will be open/visible. The toggle attribute will also be added to the modalHeader, that way it will provide a way to close the modal if it has been opened. */}\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" \r\n                                innerRef = {input => this.username=input} />     {/*Since we are using uncontrolled forms here in the HeaderComponent we need a way to set the values of the input fields. We will user the innerRef attribute and set it to a call back function where the value of the input field is passed.Then we define the property of each input field: this. username etc. and set it to equal the value of the input field(whatever the user entered) */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" \r\n                                innerRef={input => this.password = input}/>\r\n                            </FormGroup>\r\n                            <FormGroup check>     {/*For the checkboxes reactstrap requires us to add the check boolean attribute in the FormGroup component and in the Label component. Also the Input component must be nested inside the Label Component.In that case we don't need the htmlFor attribute in the label tag or the id attribute in the input tag */}\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={input => this.remember = input}/>\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\FooterComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HomeComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\ContactComponent.js",["80","81","82","83","84","85","86","87","88","89","90","91"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\partners.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\comments.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\promotions.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\AboutComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\configureStore.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\reducer.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":93,"column":82,"nodeType":"98","messageId":"99","endLine":93,"endColumn":288},{"ruleId":"96","severity":1,"message":"97","line":94,"column":86,"nodeType":"98","messageId":"99","endLine":94,"endColumn":162},{"ruleId":"96","severity":1,"message":"97","line":95,"column":93,"nodeType":"98","messageId":"99","endLine":95,"endColumn":456},{"ruleId":"96","severity":1,"message":"97","line":107,"column":57,"nodeType":"98","messageId":"99","endLine":107,"endColumn":219},{"ruleId":"96","severity":1,"message":"100","line":11,"column":59,"nodeType":"98","messageId":"101","endLine":11,"endColumn":235},{"ruleId":"96","severity":1,"message":"100","line":43,"column":9,"nodeType":"98","messageId":"101","endLine":43,"endColumn":75},{"ruleId":"96","severity":1,"message":"100","line":43,"column":79,"nodeType":"98","messageId":"101","endLine":43,"endColumn":282},{"ruleId":"96","severity":1,"message":"100","line":119,"column":8,"nodeType":"98","messageId":"101","endLine":119,"endColumn":40},{"ruleId":"96","severity":1,"message":"100","line":119,"column":44,"nodeType":"98","messageId":"101","endLine":119,"endColumn":249},{"ruleId":"96","severity":1,"message":"100","line":131,"column":9,"nodeType":"98","messageId":"101","endLine":131,"endColumn":125},{"ruleId":"102","severity":1,"message":"103","line":183,"column":37,"nodeType":"104","endLine":195,"endColumn":40},{"ruleId":"102","severity":1,"message":"103","line":212,"column":37,"nodeType":"104","endLine":224,"endColumn":39},{"ruleId":"102","severity":1,"message":"103","line":241,"column":37,"nodeType":"104","endLine":254,"endColumn":39},{"ruleId":"102","severity":1,"message":"103","line":272,"column":37,"nodeType":"104","endLine":283,"endColumn":39},{"ruleId":"102","severity":1,"message":"105","line":300,"column":45,"nodeType":"104","endLine":306,"endColumn":47},{"ruleId":"102","severity":1,"message":"106","line":312,"column":37,"nodeType":"104","endLine":315,"endColumn":83},{"ruleId":"102","severity":1,"message":"107","line":324,"column":37,"nodeType":"104","endLine":329,"endColumn":39},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","Nested block is redundant.","redundantNestedBlock","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]