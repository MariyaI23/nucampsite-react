[{"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\index.js":"1","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\App.js":"2","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\reportWebVitals.js":"3","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\DirectoryComponent.js":"4","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\campsites.js":"5","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\CampsiteInfoComponent.js":"6","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\MainComponent.js":"7","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HeaderComponent.js":"8","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\FooterComponent.js":"9","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HomeComponent.js":"10","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\ContactComponent.js":"11","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\partners.js":"12","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\comments.js":"13","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\promotions.js":"14","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\AboutComponent.js":"15","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\configureStore.js":"16","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\reducer.js":"17","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\comments.js":"18","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\campsites.js":"19","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\promotions.js":"20","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\partners.js":"21","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\ActionCreators.js":"22","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\ActionTypes.js":"23","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\LoadingComponent.js":"24","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\forms.js":"25"},{"size":697,"mtime":1612287301861,"results":"26","hashOfConfig":"27"},{"size":1001,"mtime":1613066701370,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1611527134575,"results":"29","hashOfConfig":"27"},{"size":7861,"mtime":1613448091000,"results":"30","hashOfConfig":"27"},{"size":1242,"mtime":1612316024137,"results":"31","hashOfConfig":"27"},{"size":10127,"mtime":1613447764958,"results":"32","hashOfConfig":"27"},{"size":12475,"mtime":1613494758173,"results":"33","hashOfConfig":"27"},{"size":9054,"mtime":1612926253287,"results":"34","hashOfConfig":"27"},{"size":2140,"mtime":1612311391628,"results":"35","hashOfConfig":"27"},{"size":2099,"mtime":1613447413327,"results":"36","hashOfConfig":"27"},{"size":28571,"mtime":1613495264879,"results":"37","hashOfConfig":"27"},{"size":1054,"mtime":1612315855544,"results":"38","hashOfConfig":"27"},{"size":4243,"mtime":1612315832190,"results":"39","hashOfConfig":"27"},{"size":303,"mtime":1612315868755,"results":"40","hashOfConfig":"27"},{"size":4049,"mtime":1612636814109,"results":"41","hashOfConfig":"27"},{"size":2502,"mtime":1613494165997,"results":"42","hashOfConfig":"27"},{"size":1070,"mtime":1613065716476,"results":"43","hashOfConfig":"27"},{"size":1488,"mtime":1613398399347,"results":"44","hashOfConfig":"27"},{"size":2597,"mtime":1613443189925,"results":"45","hashOfConfig":"27"},{"size":196,"mtime":1613361065153,"results":"46","hashOfConfig":"27"},{"size":188,"mtime":1613360954958,"results":"47","hashOfConfig":"27"},{"size":2735,"mtime":1613441011991,"results":"48","hashOfConfig":"27"},{"size":674,"mtime":1613438898017,"results":"49","hashOfConfig":"27"},{"size":551,"mtime":1613448307099,"results":"50","hashOfConfig":"27"},{"size":572,"mtime":1613493783293,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1dl1t9c",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\index.js",[],["109","110"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\App.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\reportWebVitals.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\DirectoryComponent.js",["111","112","113","114"],"import React from \"react\";\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport { Loading } from \"./LoadingComponent\";\r\n\r\n/*Since the DirectoryComponent is a presentational component we can use functional components here.In the below featured component's parameter list instead of passing the whole props object we are descructuring it and pass the campsite and the onClick properties. After installing the React-router, we removed the onClick as it is no longer handled here.  */\r\n/*We are creating a Link here that is set to follow the path to the directory and we are adding ${campsite.id} as a template literal because we want to show the card with the particular campsite id that the user clicks on. We are just setting up the link here. Separately the router needs to be set up with the router parameters in the Main component (nested in the Switch component where all the other Routes are) so the link would actually work.*/\r\nfunction RenderDirectoryItem({campsite}) {\r\n     return (\r\n        <Card>   \r\n            <Link to={`/directory/${campsite.id}`}>  \r\n                <CardImg width =\"100%\"src = {campsite.image} alt = {campsite.name} />       \r\n                <CardImgOverlay>\r\n                     <CardTitle>{campsite.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n     );\r\n\r\n}\r\n\r\nfunction Directory(props) {\r\n    const directory = props.campsites.campsites.map(campsite => {\r\n        return (\r\n            <div key={campsite.id} className=\"col-md-5 m-1\">\r\n                <RenderDirectoryItem campsite={campsite} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    if(props.campsites.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(props.campsites.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <h4>{props.campsites.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"row\">\r\n                <div className = \"col\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>Directory</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <h2>Directory</h2>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                {directory}                           \r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Directory;\r\n\r\n/*As we are transitioning the Directory component to be made with functional components, all of the code bellow will be commented out. To be deleted later. */\r\n/*  class Directory extends Component {  */\r\n    /*constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           selectedCampsite: null            \r\n        };\r\n    }*/\r\n     /*Above we are establishing a property selectedCamspite that will keep track of the last card the user clicked on. The intial value is set to null..*/\r\n     /*Bellow we are setting up a method that will fire up when the user selects a campsite. We are passing the campsites object. Inside this method we will update the state property with setState() method. Inside it we'll update the selectedCampsite property that we established above from null to now the campsite object which was passed into the onCamspiteSelect() method */\r\n    /*onCampsiteSelect(campsite) {\r\n        this.setState({selectedCampsite: campsite});\r\n    }*/\r\n    /*The onCampsiteSelect() method will be triggered in the Card component bellow with an onClick event since we are trying to track wich Card the user clicks on. */\r\n    /*Bellow we will establish a new method after the user has selected the Card he wants to view addl info on. This method will render(display) the new card with more info. */\r\n    /*Here with the if statement we are checking to see if campsite is an object, if yes it will evaluate as truthy, however if campsite is null or undefined it will be falsy. If truthy it will display the chosen card to the user WITH the addl information(the description property) */\r\n    /*The renderSelectedCampsite() method will be called in the final return statement at the end of this whole component. */\r\n    /* The renderSelectedCamsite() method was commented out as it was moved to the CampsiteInfoComponent's renderCampsite() method*/\r\n\r\n    /*renderSelectedCampsite(campsite) {\r\n        if(campsite) {                    \r\n            return (\r\n                <Card>\r\n                    <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{campsite.name}</CardTitle>\r\n                        <CardText>{campsite.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n        /*Setting up a return bellow the if block in case we didn't make it into the block if evaluated as falsy. It will return a simple empty <div> */\r\n        /*return <div />;*/\r\n    /*}*/\r\n    /*ALL OF THE ABOVE CODE WAS COMMENTED OUT AS IT WAS MOVED TO THE MAINCOMPONENT. WE ARE TURNING THE DIRECTORY COMPONENT INTO PRESENTATIONAL COMPONENT. THE MAINCOMPONENT WILL BE THE CONTAINER COMPONENT THAT WILL HOLD THE STATE */\r\n\r\n     /*  render() {\r\n        const directory = this.props.campsites.map(campsite => {\r\n            return (\r\n                <div key = {campsite.id} className = \"col-md-5 m-1\">     */      {/*Here we are using key so we can identify each item in the array of objects by it's unic id. The app will work fine without it but it gives warning in the console and we add it to follow best practices*/}\r\n                    /*  <Card onClick={() => this.props.onClick(campsite.id)}>  */   {/*Here we are passing the onClick method as props from MainComponent.js */}\r\n                     /*   <CardImg src = {campsite.image} alt = {campsite.name} />     */   {/*We are using curly braces here since we are inside JSX. We are using the map method on every item(campsite) in the campsites array of objects and we want the arrow function to return the stated properties of each one of the items. Map returns a new array. It will be rendered bellow where we added the directory variable inside the div with className=\"row\".*/}\r\n                     /*   <CardImgOverlay>\r\n                            <CardTitle>{campsite.name}</CardTitle>\r\n                        </CardImgOverlay>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        });  */\r\n/*The bellow return is the return from the whole component. When we are ready to break out of this component and send some data back to the parent component-that is going to happend exactly in this final return statment. All the other returns above were inside the methods which are contained inside the DirectoryComponent. These methods are just being used to pass date inside the component. */\r\n       /*  return (\r\n            <div className = \"container\">\r\n                <div className = \"row\">\r\n                    {directory}   */                    {/*Adding a JS variable that we set up after render(). It must be inside curly braces. This directory variable and the Directory class are two separate things.*/}\r\n               /*  </div>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Directory; */","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\campsites.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\CampsiteInfoComponent.js",["115","116","117"],"import React, {Component} from \"react\";\r\nimport { Card, CardImg, CardText, CardBody, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Label} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Control, LocalForm, Errors} from \"react-redux-form\";\r\nimport { Loading } from \"./LoadingComponent\";\r\n\r\n\r\nconst maxLength = len => val => !val || (val.length <= len);\r\nconst minLength = len => val => val && (val.length >= len);\r\n\r\n/*Since this component is a presentational component we will redo it using functional components. The original commented out class component bellow will be split up into 3 functional components for each of the class component's methods */\r\n/*In the parameter list of the first component again we are destructuring the campsites object. */\r\nfunction RenderCampsite({campsite}) {\r\n    return (\r\n        <div className = \"col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                <CardBody>\r\n                    <CardText>{campsite.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*START TASK 1  then go to RenderComments component below where I have rendered this CommentForm component.That finishes TASK 1 I also had to import {Component at the top and Button from reactstrap}*/\r\n/*TASK 2 creates the MODAL and it's fields in the CommentForm component. Adds the constructor and everything in it and creates the toggleModal and handleSubmit functions*/\r\n/*TASK 3-validation for min and max length of the author field */\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.state = {\r\n            isModalOpen: false,\r\n            author: '',\r\n            touched: {\r\n                author: false\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n   //The this.props.addComment action creator was added to the handleSubmit method as props so when a new comment is submitted the addComent will create an action using the values from this form. Then that action will be dispatched to it's reducer which will update the state. \r\n\r\n    handleSubmit(values) {\r\n    \r\n        this.toggleModal();  \r\n        this.props.addComment(this.props.campsiteId, values.rating, values.author, values.text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={this.handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"rating\">Rating</Label>\r\n                                <Control.select model=\".rating\" id=\"rating\" name=\"rating\" className=\"form-control\">\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </Control.select>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"author\">Your Name</Label>\r\n                                <Control.text \r\n                                    model=\".author\" \r\n                                    id=\"author\" \r\n                                    name=\"author\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Your Name\"\r\n                                    validators = {{\r\n                                        minLength: minLength(2),\r\n                                        maxLength: maxLength(15)\r\n                                    }}\r\n                                />\r\n                                <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".author\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        minLength: \"Must be at least 2 characters\",\r\n                                        maxLength: \"Must be 15 characters or less\"\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"text\">Comment</Label>\r\n                                <Control.textarea \r\n                                    model=\".text\" \r\n                                    id=\"text\" \r\n                                    name=\"text\"\r\n                                    rows=\"6\"\r\n                                    className=\"form-control\"\r\n                                />\r\n                            </div>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <i className=\"fa fa-pencil fa-lg\" /> Submit Comment\r\n                </Button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction RenderComments({comments, addComment, campsiteId}) {\r\n    if(comments) {\r\n        return (\r\n            <div className=\"col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                {comments.map(comment =>\r\n                <div key={comment.id}><p>{comment.text}\r\n                <br/> {comment.author},{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                </div>\r\n                )}\r\n                <CommentForm  campsiteId={campsiteId} addComment={addComment} />\r\n            </div>\r\n        );\r\n    }\r\n    return <div /> \r\n}\r\n\r\n/*Next we will turn the render method of the class component into a CampsiteInfo functional component */\r\n//In the RenderComments component below we are adding the action creator function-addComment as a prop along with the campsite's id. Then  we will go up to the RenderComments function and we will add the addComment and campsiteId to the parameter list(which is destructured). We will pass these also to the CommentForm at the end of the RenderComments' function. Then we need to pass this props in the CommentForm function to the handleSubmit method.\r\nfunction CampsiteInfo(props) {\r\n    if(props.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    if(props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(props.campsite) {\r\n        return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/directory\">Directory</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.campsite.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <h2>{props.campsite.name}</h2>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                <RenderCampsite campsite = {props.campsite} />\r\n                <RenderComments \r\n                    comments = {props.comments}\r\n                    addComment = {props.addComment}\r\n                    campsiteId = {props.campsite.id}\r\n                 />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    return <div />;\r\n}\r\n\r\nexport default CampsiteInfo\r\n\r\n\r\n\r\n\r\n/*class CampsiteInfo extends Component {\r\n  \r\n    \r\n    renderCampsite(campsite) {\r\n        return (\r\n            <div className = \"col-md-5 m-1\">\r\n                <Card>\r\n                    <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{campsite.name}</CardTitle>\r\n                        <CardText>{campsite.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    renderComments(comments) {\r\n        if(comments) {\r\n            return (\r\n                <div className=\"col-md-5 m-1\">\r\n                    <h4>Comments</h4>\r\n                    {comments.map(comment =>\r\n                    <div key={comment.id}><p>{comment.text}\r\n                    <br/> {comment.author},{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                    </div>\r\n                    )}\r\n                </div>\r\n            );\r\n        }\r\n        return <div />\r\n    }\r\n\r\n    \r\n    render() {\r\n        if(this.props.campsite) {\r\n            return (\r\n            <div className=\"container\">\r\n                <div className = \"row\">\r\n                    {this.renderCampsite(this.props.campsite)}\r\n                    {this.renderComments(this.props.campsite.comments)}\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n        return <div />;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CampsiteInfo  */\r\n","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\MainComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HeaderComponent.js",["118"],"import React, {Component} from \"react\";\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n    /*We need to add a constructor and a state in order to make the Navbar responsive. */\r\n     /*the isModalOpen will be a boolean property initialy set to false. This property will keep track if the modal is open or not. */\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleNav = this.toggleNav.bind(this);       {/*Here we are binding the eventhandler(the toggleNav method) to the component, so when the eventhandler is called it will refer correctly to \"this\" which is the component. */}\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n\r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n    }\r\n\r\n    /*Bellow we are setting up a method to handle when the NavBarToggler is clicked. When this method is triggered it will change the state using setState to the oposite of the current state. We are using the logical not operator in this case \"!\". */\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    /*Now we are setting up a toggleModal method just like the togleNav method above. We will also bind this method in the constructor above. */\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    /*Now we will set up the handleLogin method(event handler) used in the <Form> component. Since we are not using a backend to handle the data submission, we will just set up an alert to alert us of the form's values.We will use this.toggleModal to close the modal, and event.preventDefault to prevent the whole page from being re-rendered. Next we need to also bind this handleLogin event handler in the constructor*/\r\n    handleLogin(event) {\r\n        alert(`Username: ${this.username.value} Password: ${this.password.value} Remember: ${this.remember.checked}`);\r\n        this.toggleModal();\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>     {/*Instead of wrapping the whole return statement in a div which will serve no other purpose and will add unnecessary node to the DOM, we can use React.Fragment. It will satisfy the requirement to return only a single element and it will not add another node to the DOM. The shorthand version will be jus to wrap the return elements in <> </>. But this is not fully supported yet. */}\r\n                <Jumbotron fluid>\r\n                    <div className = \"container\">\r\n                        <div className = \"row\">\r\n                            <div className = \"col\">\r\n                                <h1>NuCamp</h1>\r\n                                <h2>a better way to camp</h2>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Navbar dark sticky = \"top\" expand = \"md\">   {/* The sticky=\"top\" is taken from the reactstrap documentation. The expand attaribute is from bootstrap and will make the navbar expand for sizez meduim an up, but it will collapse and show the toggler for sizes sm and extra-sm.*/}\r\n                  <div className = \"container\">\r\n                      <NavbarBrand className = \"mr-auto\" href = \"/\"><img src = \"assets/images/logo.png\" height = \"30\" width = \"30\" alt = \"NuCamp Logo\" /></NavbarBrand>\r\n                      <NavbarToggler onClick = {this.toggleNav} />    {/*The onClick event here will make it so, when the Navbar Toggler is clicked it will trigger the toggleNav method/event. */}\r\n                      <Collapse isOpen = {this.state.isNavOpen} navbar>   {/*Here is we are setting up the Collapse React-Router attribute and are using an attribute: isOpen setting to either false or true depending on the current state. We are adding a navbar attaribute as well per reactstrap documentation */}\r\n                          <Nav navbar>                                    {/*We are setting up the links towards each part of our page. Each NavLink is a separate NavItem in the Nav React-Router component. */}\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to =\"/home\">\r\n                                      <i className = \"fa fa-home fa-lg\" /> Home\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/directory\">\r\n                                      <i className = \"fa fa-list fa-lg\" /> Directory\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/aboutus\">\r\n                                      <i className = \"fa fa-info fa-lg\" /> About\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/contactus\">\r\n                                      <i className = \"fa fa-address-card fa-lg\" /> Contact Us\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                          </Nav>\r\n                          <span className=\"navbar-text ml-auto\">         {/*We are using a JSX span element to wrap a button component for the modal. We are placing it here so it is still inside the Collapse component so it will show when the navbar is collapsed. We are styling it so it will be the same style as the rest of the navbar items.The ml-auto will allign it horizontally to the right. */}\r\n                              <Button outline onClick={this.toggleModal}>\r\n                                  <i className=\" fa fa-sign-in fa-lg\" /> Login\r\n                              </Button>\r\n                          </span>\r\n                      </Collapse>\r\n                  </div>\r\n                </Navbar>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>                                               {/*The reactstrap <Modal> component comes with 2 built in attributes: isOpen and toggle. The shown value of the isOpen attribute means that when this state is false which initily we set it to be -the modal will be closed/hidden. If the state changes to true, the modal will be open/visible. The toggle attribute will also be added to the modalHeader, that way it will provide a way to close the modal if it has been opened. */}\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" \r\n                                innerRef = {input => this.username=input} />     {/*Since we are using uncontrolled forms here in the HeaderComponent we need a way to set the values of the input fields. We will user the innerRef attribute and set it to a call back function where the value of the input field is passed.Then we define the property of each input field: this. username etc. and set it to equal the value of the input field(whatever the user entered) */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" \r\n                                innerRef={input => this.password = input}/>\r\n                            </FormGroup>\r\n                            <FormGroup check>     {/*For the checkboxes reactstrap requires us to add the check boolean attribute in the FormGroup component and in the Label component. Also the Input component must be nested inside the Label Component.In that case we don't need the htmlFor attribute in the label tag or the id attribute in the input tag */}\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={input => this.remember = input}/>\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\FooterComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HomeComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\ContactComponent.js",["119","120","121","122","123","124","125","126","127","128","129","130","131"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\partners.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\comments.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\promotions.js",[],["132","133"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\AboutComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\configureStore.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\reducer.js",[],["134","135"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\comments.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\campsites.js",["136"],"import * as ActionTypes from \"./ActionTypes\";\r\n\r\n//Next we are adding a reducer function to handle each part of the state\r\n//Each reducer function will take 2 parameters-state(which refers to the current state that is in the store and is going to be changed by this reducer)\r\n//The first time that the reducer is called the state would not exist. We need to use the default parameter syntax to initialize the state(or at least that part of the state which is handled by this reducer) from the imported data, in this case the CAMPSITES array of object.\r\n//For the second parameter the reducer takes and \"action\" object.\r\n//Then in the body if the function we'll check for the type of the action and return the state. It is common to use JS switch statement for this.\r\n//Since we are implementing redux-thunk we will be changing the function below, so it was commented out and a it was recreated.\r\n\r\n{/*export const Campsites = (state = CAMPSITES, action) => {\r\n    switch(action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}*/}\r\n\r\n\r\n//Before the state was holding directly the campsites array, but now it will hold 3 properties: a boolean isLoading property, an errMess property and the campsites array. We are initializing them all and they will be the default function parameters.\r\n//After that we are adding the responses to the different campsites related actions to the switch statement\r\n//For the first case to ADD_CAMPSITES we are returning the previous state spread out and we will update it's values to say that is no longer loading, there are no error messages and the campsites array will be populated with the payload.\r\n//For the second case CAMPSITES_LOADING-again we are updating the state's values to show that we are waiting for the data to load, and the campsites array is empty as we haven;t received it yet from the server\r\n//For the third case CAMPSITES_FAILED we are updating the state's values to reflect the error message. No need to add the campsites array here as it has suposedly failed to load.\r\n\r\nexport const Campsites = ( state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    campsites: []\r\n  }, action) => {\r\n  switch (action.type) {\r\n      case ActionTypes.ADD_CAMPSITES:\r\n          return {...state, isLoading: false, errMess: null, campsites:action.payload};\r\n      case ActionTypes.CAMPSITES_LOADING:\r\n          return {...state, isLoading: true, errMess: null, campsites: []};\r\n      case ActionTypes.CAMPSITES_FAILED:\r\n          return {...state, isLoading: false, errMess: action.payload};\r\n      default: \r\n          return state;\r\n  }\r\n};","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\promotions.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\partners.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\ActionCreators.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\ActionTypes.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\LoadingComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\forms.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":116,"column":82,"nodeType":"143","messageId":"144","endLine":116,"endColumn":288},{"ruleId":"141","severity":1,"message":"142","line":117,"column":86,"nodeType":"143","messageId":"144","endLine":117,"endColumn":162},{"ruleId":"141","severity":1,"message":"142","line":118,"column":93,"nodeType":"143","messageId":"144","endLine":118,"endColumn":456},{"ruleId":"141","severity":1,"message":"142","line":130,"column":57,"nodeType":"143","messageId":"144","endLine":130,"endColumn":219},{"ruleId":"145","severity":1,"message":"146","line":68,"column":33,"nodeType":"147","endLine":68,"endColumn":116},{"ruleId":"145","severity":1,"message":"148","line":78,"column":33,"nodeType":"147","endLine":88,"endColumn":35},{"ruleId":"145","severity":1,"message":"149","line":102,"column":33,"nodeType":"147","endLine":108,"endColumn":35},{"ruleId":"141","severity":1,"message":"150","line":11,"column":59,"nodeType":"143","messageId":"151","endLine":11,"endColumn":235},{"ruleId":"152","severity":1,"message":"153","line":4,"column":33,"nodeType":"154","messageId":"155","endLine":4,"endColumn":40},{"ruleId":"141","severity":1,"message":"150","line":43,"column":9,"nodeType":"143","messageId":"151","endLine":43,"endColumn":75},{"ruleId":"141","severity":1,"message":"150","line":43,"column":79,"nodeType":"143","messageId":"151","endLine":43,"endColumn":282},{"ruleId":"141","severity":1,"message":"150","line":121,"column":8,"nodeType":"143","messageId":"151","endLine":121,"endColumn":40},{"ruleId":"141","severity":1,"message":"150","line":121,"column":44,"nodeType":"143","messageId":"151","endLine":121,"endColumn":249},{"ruleId":"141","severity":1,"message":"150","line":133,"column":9,"nodeType":"143","messageId":"151","endLine":133,"endColumn":125},{"ruleId":"145","severity":1,"message":"148","line":187,"column":37,"nodeType":"147","endLine":199,"endColumn":40},{"ruleId":"145","severity":1,"message":"148","line":216,"column":37,"nodeType":"147","endLine":228,"endColumn":39},{"ruleId":"145","severity":1,"message":"148","line":245,"column":37,"nodeType":"147","endLine":258,"endColumn":39},{"ruleId":"145","severity":1,"message":"148","line":276,"column":37,"nodeType":"147","endLine":287,"endColumn":39},{"ruleId":"145","severity":1,"message":"156","line":304,"column":45,"nodeType":"147","endLine":310,"endColumn":47},{"ruleId":"145","severity":1,"message":"146","line":316,"column":37,"nodeType":"147","endLine":319,"endColumn":83},{"ruleId":"145","severity":1,"message":"149","line":328,"column":37,"nodeType":"147","endLine":333,"endColumn":39},{"ruleId":"137","replacedBy":"157"},{"ruleId":"139","replacedBy":"158"},{"ruleId":"137","replacedBy":"159"},{"ruleId":"139","replacedBy":"160"},{"ruleId":"141","severity":1,"message":"142","line":10,"column":1,"nodeType":"143","messageId":"144","endLine":15,"endColumn":5},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Nested block is redundant.","redundantNestedBlock","no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["161"],["162"],["161"],["162"],"no-global-assign","no-unsafe-negation"]