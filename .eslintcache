[{"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\index.js":"1","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\App.js":"2","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\reportWebVitals.js":"3","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\DirectoryComponent.js":"4","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\campsites.js":"5","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\CampsiteInfoComponent.js":"6","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\MainComponent.js":"7","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HeaderComponent.js":"8","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\FooterComponent.js":"9","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HomeComponent.js":"10","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\ContactComponent.js":"11","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\partners.js":"12","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\comments.js":"13","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\promotions.js":"14","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\AboutComponent.js":"15","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\configureStore.js":"16","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\reducer.js":"17","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\comments.js":"18","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\campsites.js":"19","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\promotions.js":"20","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\partners.js":"21"},{"size":697,"mtime":1612287301861,"results":"22","hashOfConfig":"23"},{"size":1001,"mtime":1613066701370,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1611527134575,"results":"25","hashOfConfig":"23"},{"size":7242,"mtime":1612465158339,"results":"26","hashOfConfig":"23"},{"size":1242,"mtime":1612316024137,"results":"27","hashOfConfig":"23"},{"size":8617,"mtime":1613234030741,"results":"28","hashOfConfig":"23"},{"size":9286,"mtime":1613234316594,"results":"29","hashOfConfig":"23"},{"size":9054,"mtime":1612926253287,"results":"30","hashOfConfig":"23"},{"size":2140,"mtime":1612311391628,"results":"31","hashOfConfig":"23"},{"size":1227,"mtime":1612320820094,"results":"32","hashOfConfig":"23"},{"size":28118,"mtime":1613086882903,"results":"33","hashOfConfig":"23"},{"size":1054,"mtime":1612315855544,"results":"34","hashOfConfig":"23"},{"size":4243,"mtime":1612315832190,"results":"35","hashOfConfig":"23"},{"size":303,"mtime":1612315868755,"results":"36","hashOfConfig":"23"},{"size":4049,"mtime":1612636814109,"results":"37","hashOfConfig":"23"},{"size":1637,"mtime":1613362572166,"results":"38","hashOfConfig":"23"},{"size":1070,"mtime":1613065716476,"results":"39","hashOfConfig":"23"},{"size":188,"mtime":1613360831764,"results":"40","hashOfConfig":"23"},{"size":911,"mtime":1613360699002,"results":"41","hashOfConfig":"23"},{"size":196,"mtime":1613361065153,"results":"42","hashOfConfig":"23"},{"size":188,"mtime":1613360954958,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1dl1t9c",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\index.js",[],["92","93"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\App.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\reportWebVitals.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\DirectoryComponent.js",["94","95","96","97"],"import React from \"react\";\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/*Since the DirectoryComponent is a presentational component we can use functional components here.In the below featured component's parameter list instead of passing the whole props object we are descructuring it and pass the campsite and the onClick properties. After installing the React-router, we removed the onClick as it is no longer handled here.  */\r\n/*We are creating a Link here that is set to follow the path to the directory and we are adding ${campsite.id} as a template literal because we want to show the card with the particular campsite id that the user clicks on. We are just setting up the link here. Separately the router needs to be set up with the router parameters in the Main component (nested in the Switch component where all the other Routes are) so the link would actually work.*/\r\nfunction RenderDirectoryItem({campsite}) {\r\n     return (\r\n        <Card>   \r\n            <Link to={`/directory/${campsite.id}`}>  \r\n                <CardImg width =\"100%\"src = {campsite.image} alt = {campsite.name} />       \r\n                <CardImgOverlay>\r\n                     <CardTitle>{campsite.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n     );\r\n\r\n}\r\n\r\nfunction Directory(props) {\r\n    const directory = props.campsites.map(campsite => {\r\n        return (\r\n            <div key={campsite.id} className=\"col-md-5 m-1\">\r\n                <RenderDirectoryItem campsite={campsite} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"row\">\r\n                <div className = \"col\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>Directory</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <h2>Directory</h2>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                {directory}                           \r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Directory;\r\n\r\n/*As we are transitioning the Directory component to be made with functional components, all of the code bellow will be commented out. To be deleted later. */\r\n/*  class Directory extends Component {  */\r\n    /*constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           selectedCampsite: null            \r\n        };\r\n    }*/\r\n     /*Above we are establishing a property selectedCamspite that will keep track of the last card the user clicked on. The intial value is set to null..*/\r\n     /*Bellow we are setting up a method that will fire up when the user selects a campsite. We are passing the campsites object. Inside this method we will update the state property with setState() method. Inside it we'll update the selectedCampsite property that we established above from null to now the campsite object which was passed into the onCamspiteSelect() method */\r\n    /*onCampsiteSelect(campsite) {\r\n        this.setState({selectedCampsite: campsite});\r\n    }*/\r\n    /*The onCampsiteSelect() method will be triggered in the Card component bellow with an onClick event since we are trying to track wich Card the user clicks on. */\r\n    /*Bellow we will establish a new method after the user has selected the Card he wants to view addl info on. This method will render(display) the new card with more info. */\r\n    /*Here with the if statement we are checking to see if campsite is an object, if yes it will evaluate as truthy, however if campsite is null or undefined it will be falsy. If truthy it will display the chosen card to the user WITH the addl information(the description property) */\r\n    /*The renderSelectedCampsite() method will be called in the final return statement at the end of this whole component. */\r\n    /* The renderSelectedCamsite() method was commented out as it was moved to the CampsiteInfoComponent's renderCampsite() method*/\r\n\r\n    /*renderSelectedCampsite(campsite) {\r\n        if(campsite) {                    \r\n            return (\r\n                <Card>\r\n                    <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{campsite.name}</CardTitle>\r\n                        <CardText>{campsite.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n        /*Setting up a return bellow the if block in case we didn't make it into the block if evaluated as falsy. It will return a simple empty <div> */\r\n        /*return <div />;*/\r\n    /*}*/\r\n    /*ALL OF THE ABOVE CODE WAS COMMENTED OUT AS IT WAS MOVED TO THE MAINCOMPONENT. WE ARE TURNING THE DIRECTORY COMPONENT INTO PRESENTATIONAL COMPONENT. THE MAINCOMPONENT WILL BE THE CONTAINER COMPONENT THAT WILL HOLD THE STATE */\r\n\r\n     /*  render() {\r\n        const directory = this.props.campsites.map(campsite => {\r\n            return (\r\n                <div key = {campsite.id} className = \"col-md-5 m-1\">     */      {/*Here we are using key so we can identify each item in the array of objects by it's unic id. The app will work fine without it but it gives warning in the console and we add it to follow best practices*/}\r\n                    /*  <Card onClick={() => this.props.onClick(campsite.id)}>  */   {/*Here we are passing the onClick method as props from MainComponent.js */}\r\n                     /*   <CardImg src = {campsite.image} alt = {campsite.name} />     */   {/*We are using curly braces here since we are inside JSX. We are using the map method on every item(campsite) in the campsites array of objects and we want the arrow function to return the stated properties of each one of the items. Map returns a new array. It will be rendered bellow where we added the directory variable inside the div with className=\"row\".*/}\r\n                     /*   <CardImgOverlay>\r\n                            <CardTitle>{campsite.name}</CardTitle>\r\n                        </CardImgOverlay>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        });  */\r\n/*The bellow return is the return from the whole component. When we are ready to break out of this component and send some data back to the parent component-that is going to happend exactly in this final return statment. All the other returns above were inside the methods which are contained inside the DirectoryComponent. These methods are just being used to pass date inside the component. */\r\n       /*  return (\r\n            <div className = \"container\">\r\n                <div className = \"row\">\r\n                    {directory}   */                    {/*Adding a JS variable that we set up after render(). It must be inside curly braces. This directory variable and the Directory class are two separate things.*/}\r\n               /*  </div>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Directory; */","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\campsites.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\CampsiteInfoComponent.js",["98","99","100"],"import React, {Component} from \"react\";\r\nimport { Card, CardImg, CardText, CardBody, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Label} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Control, LocalForm, Errors} from \"react-redux-form\";\r\n\r\n\r\nconst maxLength = len => val => !val || (val.length <= len);\r\nconst minLength = len => val => val && (val.length >= len);\r\n\r\n/*Since this component is a presentational component we will redo it using functional components. The original commented out class component bellow will be split up into 3 functional components for each of the class component's methods */\r\n/*In the parameter list of the first component again we are destructuring the campsites object. */\r\nfunction RenderCampsite({campsite}) {\r\n    return (\r\n        <div className = \"col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                <CardBody>\r\n                    <CardText>{campsite.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*START TASK 1  then go to RenderComments component below where I have rendered this CommentForm component.That finishes TASK 1 I also had to import {Component at the top and Button from reactstrap}*/\r\n/*TASK 2 creates the MODAL and it's fields in the CommentForm component. Adds the constructor and everything in it and creates the toggleModal and handleSubmit functions*/\r\n/*TASK 3-validation for min and max length of the author field */\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.state = {\r\n            isModalOpen: false,\r\n            author: '',\r\n            touched: {\r\n                author: false\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n    handleSubmit(values) {\r\n        console.log(\"Current state is \" + JSON.stringify(values));\r\n        alert(\"Current state is \" + JSON.stringify(values));\r\n        this.toggleModal();  \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={this.handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"rating\">Rating</Label>\r\n                                <Control.select model=\".rating\" id=\"rating\" name=\"rating\" className=\"form-control\">\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </Control.select>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"author\">Your Name</Label>\r\n                                <Control.text \r\n                                    model=\".author\" \r\n                                    id=\"author\" \r\n                                    name=\"author\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Your Name\"\r\n                                    validators = {{\r\n                                        minLength: minLength(2),\r\n                                        maxLength: maxLength(15)\r\n                                    }}\r\n                                />\r\n                                <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".author\"\r\n                                    show=\"touched\"\r\n                                    component=\"div\"\r\n                                    messages={{\r\n                                        minLength: \"Must be at least 2 characters\",\r\n                                        maxLength: \"Must be 15 characters or less\"\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Label htmlFor=\"text\">Comment</Label>\r\n                                <Control.textarea \r\n                                    model=\".text\" \r\n                                    id=\"text\" \r\n                                    name=\"text\"\r\n                                    rows=\"6\"\r\n                                    className=\"form-control\"\r\n                                />\r\n                            </div>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <i className=\"fa fa-pencil fa-lg\" /> Submit Comment\r\n                </Button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction RenderComments({comments}) {\r\n    if(comments) {\r\n        return (\r\n            <div className=\"col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                {comments.map(comment =>\r\n                <div key={comment.id}><p>{comment.text}\r\n                <br/> {comment.author},{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                </div>\r\n                )}\r\n                <CommentForm />\r\n            </div>\r\n        );\r\n    }\r\n    return <div /> \r\n}\r\n\r\n/*Next we will turn the render method of the class component into a CampsiteInfo functional component */\r\n\r\nfunction CampsiteInfo(props) {\r\n    if(props.campsite) {\r\n        return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/directory\">Directory</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.campsite.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <h2>{props.campsite.name}</h2>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                <RenderCampsite campsite = {props.campsite} />\r\n                <RenderComments comments = {props.comments} />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    return <div />;\r\n}\r\n\r\nexport default CampsiteInfo\r\n\r\n\r\n\r\n\r\n/*class CampsiteInfo extends Component {\r\n  \r\n    \r\n    renderCampsite(campsite) {\r\n        return (\r\n            <div className = \"col-md-5 m-1\">\r\n                <Card>\r\n                    <CardImg top src = {campsite.image} alt = {campsite.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{campsite.name}</CardTitle>\r\n                        <CardText>{campsite.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    renderComments(comments) {\r\n        if(comments) {\r\n            return (\r\n                <div className=\"col-md-5 m-1\">\r\n                    <h4>Comments</h4>\r\n                    {comments.map(comment =>\r\n                    <div key={comment.id}><p>{comment.text}\r\n                    <br/> {comment.author},{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                    </div>\r\n                    )}\r\n                </div>\r\n            );\r\n        }\r\n        return <div />\r\n    }\r\n\r\n    \r\n    render() {\r\n        if(this.props.campsite) {\r\n            return (\r\n            <div className=\"container\">\r\n                <div className = \"row\">\r\n                    {this.renderCampsite(this.props.campsite)}\r\n                    {this.renderComments(this.props.campsite.comments)}\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n        return <div />;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CampsiteInfo  */\r\n","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\MainComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HeaderComponent.js",["101"],"import React, {Component} from \"react\";\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n    /*We need to add a constructor and a state in order to make the Navbar responsive. */\r\n     /*the isModalOpen will be a boolean property initialy set to false. This property will keep track if the modal is open or not. */\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleNav = this.toggleNav.bind(this);       {/*Here we are binding the eventhandler(the toggleNav method) to the component, so when the eventhandler is called it will refer correctly to \"this\" which is the component. */}\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n\r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n    }\r\n\r\n    /*Bellow we are setting up a method to handle when the NavBarToggler is clicked. When this method is triggered it will change the state using setState to the oposite of the current state. We are using the logical not operator in this case \"!\". */\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    /*Now we are setting up a toggleModal method just like the togleNav method above. We will also bind this method in the constructor above. */\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    /*Now we will set up the handleLogin method(event handler) used in the <Form> component. Since we are not using a backend to handle the data submission, we will just set up an alert to alert us of the form's values.We will use this.toggleModal to close the modal, and event.preventDefault to prevent the whole page from being re-rendered. Next we need to also bind this handleLogin event handler in the constructor*/\r\n    handleLogin(event) {\r\n        alert(`Username: ${this.username.value} Password: ${this.password.value} Remember: ${this.remember.checked}`);\r\n        this.toggleModal();\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>     {/*Instead of wrapping the whole return statement in a div which will serve no other purpose and will add unnecessary node to the DOM, we can use React.Fragment. It will satisfy the requirement to return only a single element and it will not add another node to the DOM. The shorthand version will be jus to wrap the return elements in <> </>. But this is not fully supported yet. */}\r\n                <Jumbotron fluid>\r\n                    <div className = \"container\">\r\n                        <div className = \"row\">\r\n                            <div className = \"col\">\r\n                                <h1>NuCamp</h1>\r\n                                <h2>a better way to camp</h2>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Navbar dark sticky = \"top\" expand = \"md\">   {/* The sticky=\"top\" is taken from the reactstrap documentation. The expand attaribute is from bootstrap and will make the navbar expand for sizez meduim an up, but it will collapse and show the toggler for sizes sm and extra-sm.*/}\r\n                  <div className = \"container\">\r\n                      <NavbarBrand className = \"mr-auto\" href = \"/\"><img src = \"assets/images/logo.png\" height = \"30\" width = \"30\" alt = \"NuCamp Logo\" /></NavbarBrand>\r\n                      <NavbarToggler onClick = {this.toggleNav} />    {/*The onClick event here will make it so, when the Navbar Toggler is clicked it will trigger the toggleNav method/event. */}\r\n                      <Collapse isOpen = {this.state.isNavOpen} navbar>   {/*Here is we are setting up the Collapse React-Router attribute and are using an attribute: isOpen setting to either false or true depending on the current state. We are adding a navbar attaribute as well per reactstrap documentation */}\r\n                          <Nav navbar>                                    {/*We are setting up the links towards each part of our page. Each NavLink is a separate NavItem in the Nav React-Router component. */}\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to =\"/home\">\r\n                                      <i className = \"fa fa-home fa-lg\" /> Home\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/directory\">\r\n                                      <i className = \"fa fa-list fa-lg\" /> Directory\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/aboutus\">\r\n                                      <i className = \"fa fa-info fa-lg\" /> About\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink className = \"nav-link\" to = \"/contactus\">\r\n                                      <i className = \"fa fa-address-card fa-lg\" /> Contact Us\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                          </Nav>\r\n                          <span className=\"navbar-text ml-auto\">         {/*We are using a JSX span element to wrap a button component for the modal. We are placing it here so it is still inside the Collapse component so it will show when the navbar is collapsed. We are styling it so it will be the same style as the rest of the navbar items.The ml-auto will allign it horizontally to the right. */}\r\n                              <Button outline onClick={this.toggleModal}>\r\n                                  <i className=\" fa fa-sign-in fa-lg\" /> Login\r\n                              </Button>\r\n                          </span>\r\n                      </Collapse>\r\n                  </div>\r\n                </Navbar>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>                                               {/*The reactstrap <Modal> component comes with 2 built in attributes: isOpen and toggle. The shown value of the isOpen attribute means that when this state is false which initily we set it to be -the modal will be closed/hidden. If the state changes to true, the modal will be open/visible. The toggle attribute will also be added to the modalHeader, that way it will provide a way to close the modal if it has been opened. */}\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" \r\n                                innerRef = {input => this.username=input} />     {/*Since we are using uncontrolled forms here in the HeaderComponent we need a way to set the values of the input fields. We will user the innerRef attribute and set it to a call back function where the value of the input field is passed.Then we define the property of each input field: this. username etc. and set it to equal the value of the input field(whatever the user entered) */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" \r\n                                innerRef={input => this.password = input}/>\r\n                            </FormGroup>\r\n                            <FormGroup check>     {/*For the checkboxes reactstrap requires us to add the check boolean attribute in the FormGroup component and in the Label component. Also the Input component must be nested inside the Label Component.In that case we don't need the htmlFor attribute in the label tag or the id attribute in the input tag */}\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={input => this.remember = input}/>\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\FooterComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\HomeComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\ContactComponent.js",["102","103","104","105","106","107","108","109","110","111","112","113"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\n/*Setting up functions to help with the validation of the react-redux form */\r\n/*the \"required\" function takes \"val\"(value) as an argument and checks if a value was received(that input was entered by user). Otherwise \"val\" will evaluate as false if it was undefined or null. */\r\n/*Then \"required\" will check to make sure that lenght of the \"val\" string received is greater than 0. If no input was entered this will evaluate as false and will create an error. */\r\n/*The maxLength function requires to be wrapped in another function due to the way it will be called later. The first one takes the maximum length, then the second one takes the value(the input string) */\r\n/*Then from inside the inner function we want to return true if the max length has not been exceeded.So !val will return true because if there is no value, then the maximum length clearly has not been exceeded OR(||)  we will also return true if the value's length is less than or equal to the maximum. If both of these conditions are false than the function will return false for maxLength and it will create an error.*/\r\n/*minLength works similarly. It wraps a function in a function and the inner function will return true if there is a value and if that value is greater than or equal to the minimum. If not-it will return as false for minLength and that will create an error. */\r\n/*Next function isNumber will check to see if the value entered is a number.We are using the + unary operator to turn the value into a number if possible, if not possible it will return NaN. Then with !NaN we are checking to see if the value is oposite of NaN. Ultimatelly if it is a valid number this(!NaN) will return as true(like saying-this is NOT NaN), otherwise-false. */\r\n/*With the last function we will use a regular expression to check if the email input is correct. The first part [A-Z0-9._%+-] checks to see if the first part of the email contains any of those permited letters(from A-Z), numbers(from 0-9) and symbols(._%+-). Then we check to see if there is the @ symbol and following that where the domain name would be we are permitting letters(A-Z), again numbers(0-9) any number of times. After that a . is required(\\.) then the domain extension which can be any letters(A-Z) but only between 2 and 4 letters {2,4} */\r\n/*At the end of the regular expression we are using the JS built in method test() which will test whatever value is passed in to see if it matches the regex pattern. */\r\n/*Each of these form validation functions will be implemented in the Form below in the Controls tags. */\r\n\r\nconst required = val => val && val.length;\r\nconst maxLength = len => val => !val || (val.length <= len);\r\nconst minLength = len => val => val && (val.length >= len);\r\nconst isNumber = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            phoneNum: '',\r\n            email: '',\r\n            agree: false,\r\n            contactType: \"By Phone\",\r\n            feedback: '',\r\n            touched: {\r\n                firstName: false,\r\n                lastName: false,\r\n                phoneNum: false,\r\n                email: false\r\n            }\r\n        };\r\n\r\n        {/*this.handleInputChange = this.handleInputChange.bind(this); */}    {/*This binding makes it so that we can use the \"this\" keyword inside the handleInputChange() method and have it point to the correct object. This line becomes redundant as we are implementing redux. */}\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n     /*Below we will set up the form validation method, passing in the properties we need to validate. Inside this method we'll set up an errors object. The properties of this object will hold the error messages for the for fields if there are any errors. Each will be initialized with an empty string(\"\") which means there are no errors. */\r\n     /*The first if statement will check if the firstName field has been touched. If yes, then another if statement nested inside the first one will check if the lenght of the value that was entered inside that field is < 2. If so, then we are setting up and error message for the fist name.Then we are setting up an else if check to see if the first name is > 15 characters. If so then we'll set up another error message for that. The same validation logic will be used for the last name.*/\r\n     /*To check the phone number we need to use a regular expression to make sure that the phone number entered contains only digits(that is what \\d stands for). The if statement will check if the phoneNum field has been touched AND(&&) if it failed the reg.expr. test with the logical NOT operator-!(basically saying-it is not true that the number contains digits only). If so, then an error message will be sent for that. */\r\n     /*With the email field we will check if the email field has been touched AND(&&) if the string entered  DOESN'T include the \"@\" symbol with the logical !(NOT) operator. If so, we'll set up an error message. */\r\n     /*At the end we will return the errors object. If there were any validation errors for any of the fields, then the corresponding property in the errors object should contain an error message. If not it should contain an empty string. */\r\n     /*After implementing react-redux-form we no longer need the validate method. */\r\n\r\n    /*validate(firstName, lastName, phoneNum, email) {\r\n        const errors = {\r\n            firstName: '',\r\n            lastName: '',\r\n            phoneNum: '',\r\n            email: ''\r\n        };\r\n\r\n        if(this.state.touched.firstName) {\r\n            if(firstName.length < 2) {\r\n                errors.firstName = \"First name must be at least 2 characters.\";\r\n            } else if (firstName.length > 15) {\r\n                errors.firstName = \"First name must be 15 or less characters.\";\r\n            }\r\n        }\r\n\r\n        if(this.state.touched.lastName) {\r\n            if(lastName.length < 2) {\r\n                errors.lastName = \"Last name must be at least 2 characters.\";\r\n            } else if (lastName.length > 15) {\r\n                errors.lastName = \"Last name must be 15 or less characters.\";\r\n            }\r\n        }\r\n    \r\n        const reg = /^\\d+$/;\r\n        if(this.state.touched.phoneNum && !reg.test(phoneNum)) {\r\n            errors.phoneNum = \"The phone number should contain only numbers.\";\r\n        }\r\n\r\n        if(this.state.touched.email && !email.includes(\"@\")) {\r\n            errors.email = \"Email should contain a @.\";\r\n        }\r\n       \r\n        return errors;\r\n\r\n    }*/\r\n\r\n    /*The code until the handleSubmit() is commented out as we are implementing redux */\r\n    /*We don't need to bind the handleBlur method like the other ones above is because we will use an arrow function which allows it to have access to the state. Also we are not passing \"even\" here but \"field\" instead.Inside this method we will use setState() to change the \"touched\" object. We don't want to change the entire \"touched\" object, we only wnat to change one of the properties inside it.We do it by using the spread syntax. This will spread out the this.state.touched object, then will update the property that corresponds to the filed that triggered this event(if the user entered some input into first or last name or phine or email etc.We are using the computed property [field] to get the name of the property that was changed, and we will set the value of [field] to true so we know that the property was touched.) */\r\n   /* handleBlur= (field) => () => {\r\n        this.setState({\r\n            touched: {...this.state.touched, [field]: true}\r\n        });\r\n    }*/\r\n    /*The touched property is needed for form validation. It means if an input field has been \"touched\" by the user.We will set it up as an object.The touched property will keep track if the things listed inside it have been touched or not(if the user has entered anything in that field or not). The initial value for those fields is false(they are untouched).That way we know that if an input field has not been touched we don't need to run validation on that field yet. In order to know if the user has entered something into the input field we use an event called Blur which fires when the user enters something into the field and then leaves it. In the form bellow we will enter onBlur event handler set to a method called handleBlur.*/\r\n    \r\n\r\n    /*The following method will be set up to handle changes to form elements. We will be passing an event object. We are setting up the target and name variables to make it easier to access later the properties event.target and event.target.name. */\r\n    /*With the value variable we are using a ternary operator which checks if the type of the form element that triggered this event is a checkbox then we get the value from the target's checked attribute. The checked attribute is a boolean attribute and can be either true or false. If the form element is NOT a checkbox, then we get the value from the target's value.*/\r\n    /*After that we are useing setState() method with a computed property name in order to set the property based on the target's name. Depending on which form element triggered this event, that \"name\" could be firstName, lastName, email etc. We want this to be flexible so the \"name\" is taken from the input that was changed which we get through the \"event\" object that was passed in rather than being hard coded here. For the value of the computed propert[name] we will use the variable \"value\" so we can get everything that is stored in it. After that we go back up to the constructor of the class component above and we need to bind the \"this\" keyword to this handleInputChange() method. */\r\n   /* handleInputChange(event) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }*/\r\n\r\n\r\n    /*For now we are setting up the handleSubmit() method to log the current state to the console. Since console.log expects a string, not an object, we will use a global method that will help make a string from a JS object. It is called JSON.stringify method. We are adding the same thing as an alert as well just in case so we will get this message in the console and as an alret as well. Then again we need to go back up to the constructor of the class component above and bind the \"this* keyword to this event as well. After implementing react-redux-form, the word\"event\" in the parameter list was changed to values and (this.state) after.JSON.stringify was also replaced with values. */\r\n    handleSubmit(values) {\r\n        console.log(\"Current state is \" + JSON.stringify(values));\r\n        alert(\"Current state is \" + JSON.stringify(values));\r\n       {/* event.preventDefault();  */}    {/*When we submit a form usually the whole page refreshes. To prevent that we use event.preventDefault. After implementing react-redux-form we no longer need this line as this will be handled by redux. */}\r\n    }\r\n \r\n\r\n    /*We will create another errors varibale inside the render method as the one entered in the validate method is localy scoped and is not available here. Using this new errors varibale we will call the validate mathod using \"this\" keyword.We will pass in the current values of the first, last name, phone and email which are stored in the state and we have access to them. */\r\n    /*Then the validate method will check those fields and return the errors object which will then be stored inside this errors variable. */\r\n    /*Any time there is a change in those input fields this component will be re-rendered so this validate method will be called at every change. */\r\n    /*Then in the form we need to set an \"invalid\" attribute for each inout field that we are validating.This invalid attribute will be a boolean attribute. For it's value we will set a condition that checks if there is an errors messages set for this field. An empty string will evaluate as false but if the entered input is not an empty string it will evaluate as true, so then the invalid attribute is set to true. Then below each of the inputs we are validating we'll render the <FormFeedback> component. */\r\n    /*In the <FormFeedback> component we will render the errors message. */\r\n    /*After we commented out the validate method we no longer need the errors variable that was calling that method. */\r\n    render() {\r\n\r\n        {/*const errors = this.validate(this.state.firstName, this.state.lastName, this.state.phoneNum, this.state.email)*/}\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <Breadcrumb>\r\n                                <BreadcrumbItem>\r\n                                    <Link to=\"/home\">Home</Link>\r\n                                </BreadcrumbItem>\r\n                                <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <h2>Contact Us</h2>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row row-content align-items-center\">\r\n                    <div className=\"col-sm-4\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            1 Nucamp Way<br />\r\n                            Seattle, WA 98001<br />\r\n                            U.S.A.\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <a role=\"button\" className=\"btn btn-link\" href=\"tel:+12065551234\"><i className=\"fa fa-phone\" /> 1-206-555-1234</a><br />\r\n                        <a role=\"button\" className=\"btn btn-link\" href=\"mailto:fakeemail@fakeemail.co\"><i className=\"fa fa-envelope-o\" /> campsites@nucamp.co</a>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*The following code contains the Feedback form. In the <Col> or <Label> reactstrap components we can set the margins as md={10} which is the same as className=\"col-md-10\". In the <Label> component instead of using the \"for\" attribute we use htmlFor as we are in JSX. In some of the <Col> components we are using md={{size: 4,offset: 2}}. First set of {} is because we are using JS in JSX, second set of {} is because we are defining an object.This allows us to set up both the responsive size and the responsive offset for the column at the same time. This is the same as writting <div class=\"col-md-4 offset-md-2\">.*/}\r\n                 {/*We set the usual html attributes in the input tags but to make this a control form we need to set the value property that we defined before to be ={this.state.phoneNum} or whatever is applicable to the specif. input field. The exception is the input with type of checkbox. There instead of value we will use the checked attribute. Each input component also gets an onChange event handler that is set to the handleInputChange() method that was created earlier.*/} \r\n                 {/*The start <Form> tag will get an onSubmit event handler set to the method handleSubmit().Explanation about the onBlur eventhandler is by the \"touched\" property of the state. After implementing react-redux-form we changed the <Form> tag to <LocalForm>.*/}\r\n                 {/*In order to still be able to use the handleSubmit method in the <LocalForm> tag with react-redux-form we need to make into an arrow function and pass the \"values\" to it. */}\r\n                 {/*We also had to replace the <FormGroup> tags from reactstrap to <Row> tags from react-redux form and give them a class of form-group, */}\r\n                 {/*The input tags where changed to Control tags from react-redux-form, the type html attribute was removed and the type of input is specified by adding for ex. .text after Control. */}\r\n                 {/*In the control tags we add model property which tells redux that the value of lets say the first name input field will be stored in the state under the property name of firstName. The value for the model attribute will always be the same as the value of the name attribute but with a . in front of it. */}\r\n                 {/*In the Control tags we will implement an attribute called validators. For the value we will use the appropriate functions(or rather the variables that we assigned the functions to) we set up for validating the form above. */}\r\n                 {/*In the Controls tag for the first name the validators attribute will use several values. for the minLength and maxLenght we are also setting that we want minLength of 2 characters and maxLength of 15. */}\r\n                 {/*After the Cotrols tag we will implement the Errors tag(component) with the attributes of className=\"text-danger\" for making the text red; the model attribute needs to match the model of the corresponding Controls component. The show=\"touched\" will cause the form to only show error messages if it has been touched by the user. The component=\"div\" tells react-redux-form to wrap each message in a div. The messages attribute will contain the error messages which will be shown for the functions that are inside of it. For ex. if the \"required\" function comes back false it will show the message that this field is required.*/}\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h2>Send us your Feedback</h2>\r\n                        <hr />\r\n                    </div>\r\n                    <div className=\"col-md-10\">\r\n                        <LocalForm onSubmit={values => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstName\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstName\" id=\"firstName\" name=\"firstName\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators = {{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(15)\r\n                                        }}\r\n                                        /*value={this.state.firstName}\r\n                                        invalid={errors.firstName}\r\n                                        onBlur={this.handleBlur(\"firstName\")}\r\n                                        onChange={this.handleInputChange}*/ \r\n                                     />\r\n                                     <Errors\r\n                                         className=\"text-danger\"\r\n                                         model=\".firstName\"\r\n                                         show=\"touched\"\r\n                                         component=\"div\"\r\n                                         messages = {{\r\n                                             required: \"Required\",\r\n                                             minLength: \"Must be at least 2 characters\",\r\n                                             maxLength: \"Must be 15 characters or less\"\r\n                                         }}\r\n                                      />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastName\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model = \".lastName\" id=\"lastName\" name=\"lastName\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators = {{\r\n                                            required,\r\n                                            minLength: minLength(2),\r\n                                            maxLength: maxLength(15)\r\n                                        }}\r\n                                        /*value={this.state.lastName}\r\n                                        invalid={errors.lastName}\r\n                                        onBlur={this.handleBlur(\"lastName\")}\r\n                                        onChange={this.handleInputChange} */\r\n                                    />\r\n                                      <Errors\r\n                                         className=\"text-danger\"\r\n                                         model=\".lastName\"\r\n                                         show=\"touched\"\r\n                                         component=\"div\"\r\n                                         messages = {{\r\n                                             required: \"Required\",\r\n                                             minLength: \"Must be at least 2 characters\",\r\n                                             maxLength: \"Must be 15 characters or less\"\r\n                                         }}\r\n                                      />\r\n                                </Col>                        \r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"phoneNum\" md={2}>Phone</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".phoneNum\" id=\"phoneNum\" name=\"phoneNum\"\r\n                                        placeholder=\"Phone number\"\r\n                                        className=\"form-control\"\r\n                                        validators= {{\r\n                                            required,\r\n                                            minLength: minLength(10),\r\n                                            maxLength: maxLength(15),\r\n                                            isNumber\r\n                                        }}\r\n                                        /*value={this.state.phoneNum}\r\n                                        invalid={errors.phoneNum}\r\n                                        onBlur={this.handleBlur(\"phoneNum\")}\r\n                                        onChange={this.handleInputChange} */\r\n                                    />\r\n                                      <Errors\r\n                                         className=\"text-danger\"\r\n                                         model=\".phoneNum\"\r\n                                         show=\"touched\"\r\n                                         component=\"div\"\r\n                                         messages = {{\r\n                                             required: \"Required\",\r\n                                             minLength: \"Must be at least 10 numbers\",\r\n                                             maxLength: \"Must be 15 numbers or less\",\r\n                                             isNumber: \"Must be a number\"\r\n                                         }}\r\n                                      />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required,\r\n                                            validEmail\r\n                                        }}\r\n                                        /*value={this.state.email}\r\n                                        invalid={errors.email}\r\n                                        onBlur={this.handleBlur(\"email\")}\r\n                                        onChange={this.handleInputChange} */\r\n                                    />\r\n                                      <Errors\r\n                                         className=\"text-danger\"\r\n                                         model=\".email\"\r\n                                         show=\"touched\"\r\n                                         component=\"div\"\r\n                                         messages = {{\r\n                                             required: \"Required\",\r\n                                             validEmail: \"Invalid email address\"\r\n                                         }}\r\n                                      />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 4, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox\r\n                                                model=\".agree\"\r\n                                                name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                                /*checked={this.state.agree}\r\n                                                onChange={this.handleInputChange}*/ \r\n                                            /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={4}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                            className=\"form-control\"\r\n                                            /*value={this.state.contactType}\r\n                                            onChange={this.handleInputChange}*/  >\r\n                                        <option>By Phone</option>\r\n                                        <option>By Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"feedback\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".feedback\" id=\"feedback\" name=\"feedback\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\"\r\n                                       /* value={this.state.feedback}\r\n                                        onChange={this.handleInputChange} */\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\partners.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\comments.js",[],["114","115"],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\shared\\promotions.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\components\\AboutComponent.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\configureStore.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\reducer.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\comments.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\campsites.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\promotions.js",[],"C:\\Users\\Mariya\\Desktop\\NucampFolder\\3-React\\nucampsite\\src\\redux\\partners.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":93,"column":82,"nodeType":"122","messageId":"123","endLine":93,"endColumn":288},{"ruleId":"120","severity":1,"message":"121","line":94,"column":86,"nodeType":"122","messageId":"123","endLine":94,"endColumn":162},{"ruleId":"120","severity":1,"message":"121","line":95,"column":93,"nodeType":"122","messageId":"123","endLine":95,"endColumn":456},{"ruleId":"120","severity":1,"message":"121","line":107,"column":57,"nodeType":"122","messageId":"123","endLine":107,"endColumn":219},{"ruleId":"124","severity":1,"message":"125","line":64,"column":33,"nodeType":"126","endLine":64,"endColumn":116},{"ruleId":"124","severity":1,"message":"127","line":74,"column":33,"nodeType":"126","endLine":84,"endColumn":35},{"ruleId":"124","severity":1,"message":"128","line":98,"column":33,"nodeType":"126","endLine":104,"endColumn":35},{"ruleId":"120","severity":1,"message":"129","line":11,"column":59,"nodeType":"122","messageId":"130","endLine":11,"endColumn":235},{"ruleId":"120","severity":1,"message":"129","line":43,"column":9,"nodeType":"122","messageId":"130","endLine":43,"endColumn":75},{"ruleId":"120","severity":1,"message":"129","line":43,"column":79,"nodeType":"122","messageId":"130","endLine":43,"endColumn":282},{"ruleId":"120","severity":1,"message":"129","line":119,"column":8,"nodeType":"122","messageId":"130","endLine":119,"endColumn":40},{"ruleId":"120","severity":1,"message":"129","line":119,"column":44,"nodeType":"122","messageId":"130","endLine":119,"endColumn":249},{"ruleId":"120","severity":1,"message":"129","line":131,"column":9,"nodeType":"122","messageId":"130","endLine":131,"endColumn":125},{"ruleId":"124","severity":1,"message":"127","line":183,"column":37,"nodeType":"126","endLine":195,"endColumn":40},{"ruleId":"124","severity":1,"message":"127","line":212,"column":37,"nodeType":"126","endLine":224,"endColumn":39},{"ruleId":"124","severity":1,"message":"127","line":241,"column":37,"nodeType":"126","endLine":254,"endColumn":39},{"ruleId":"124","severity":1,"message":"127","line":272,"column":37,"nodeType":"126","endLine":283,"endColumn":39},{"ruleId":"124","severity":1,"message":"131","line":300,"column":45,"nodeType":"126","endLine":306,"endColumn":47},{"ruleId":"124","severity":1,"message":"125","line":312,"column":37,"nodeType":"126","endLine":315,"endColumn":83},{"ruleId":"124","severity":1,"message":"128","line":324,"column":37,"nodeType":"126","endLine":329,"endColumn":39},{"ruleId":"116","replacedBy":"132"},{"ruleId":"118","replacedBy":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Nested block is redundant.","redundantNestedBlock","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["134"],["135"],"no-global-assign","no-unsafe-negation"]